<!--

    SoftVis3D Sonar plugin
    Copyright (C) 2014 Stefan Rinderle
    stefan@rinderle.info

    SoftVis3D Sonar plugin can not be copied and/or distributed without the express
    permission of Stefan Rinderle.

-->
<script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/threeJS/three.min.js"></script>

<script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/threeJS/OrbitControls.js"></script>

<script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/threeJS/Detector.js"></script>
<script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/threeJS/stats.min.js"></script>

<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.27/angular.min.js"></script>

<script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/angular/SoftVis3dAngular.js"></script>
<script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/angular/BackendService.js"></script>
<script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/angular/DetailsController.js"></script>
<script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/angular/Directives.js"></script>
<script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/angular/RenderController.js"></script>
<script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/angular/SceneObjectsService.js"></script>
<script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/angular/TreeService.js"></script>

<%
   # get extension class and start layout
   softVis3D = Api::Utils.java_facade.
           getComponentByClassname('softVis3D', 'de.rinderle.softvis3d.SoftVis3DExtension')
%>

<script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/js/CreateElements.js"></script>

<div ng-app="softVis3dAngular" resize>
    <div id="metricForm" style="height: 30px;">
        <%
           metricIds = softVis3D.getMetricsForSnapshot(@snapshot.id)

           # get all defined metric for project files
           metrics=[]
           metricIds.each do |index|
             m = metric(index)
             metrics << m if m
           end

           # set default metric ids if no metrics selected
           if (params[:metric1].blank?)
             puts("no param 1 - default param")
             params[:metric1] = softVis3D.getMetric1FromSettings().to_s
           end
           if (params[:metric2].blank?)
             puts("no param 2 - default param")
             params[:metric2] = softVis3D.getMetric2FromSettings().to_s
           end
        %>
        <% form_tag({:action => @resource.id.to_s}, {:id => 'softVis3DForm', :method => 'get'}) do %>
            <input type="hidden" name="page" value="SoftVis3D">

            Building footprint metric:
            <select name="metric1">
                <%
                   # show all graph (as layers)
                   metrics.each do |metric|
                     if (metric.id.to_s==params[:metric1].to_s)
                %>
                        <option value="<%= metric.id %>" selected><%= metric.short_name %></option>
                    <% else %>
                        <option value="<%= metric.id %>"><%= metric.short_name %></option>
                    <% end %>
                <%
                   end
                %>
            </select>

            Building height metric:

            <select name="metric2">
                <%
                   # show all graph (as layers)
                   metrics.each do |metric|
                     if (metric.id.to_s==params[:metric2].to_s)
                %>
                        <option value="<%= metric.id %>" selected><%= metric.short_name %></option>
                    <% else %>
                        <option value="<%= metric.id %>"><%= metric.short_name %></option>
                    <% end %>
                <%
                   end
                %>
            </select>

            View type:
            <select name="viewType">
                <%
                   if ("city"==params[:viewType].to_s)
                %>
                    <option value="city" selected>City</option>
                <% else %>
                    <option value="city">City</option>
                <% end %>
                <%
                   if ("dependency"==params[:viewType].to_s)
                %>
                    <option value="dependency" selected>Dependency</option>
                <% else %>
                    <option value="dependency">Dependency</option>
                <% end %>
            </select>

            <input type="submit" value="Submit">
        <% end %>
    </div>

    <div ng-controller="DetailsController" id="detailsContainer"
         style="border: 1px solid black; position: absolute;
                 top: 40px; right: 10px; width: 200px; height: 300px;
                 overflow: auto;">

        <h2 style="color: #d58512">{{node.name}} ({{node.footprintMetricValue}} / {{node.heightMetricValue}})</h2>
        <!--div ng-show="node.isNode">
            <button ng-hide="node.isHidden" type='button' ng-click='triggerVisible();'>Show all</button>
            <button ng-show="node.isHidden" type='button' ng-click='triggerVisible();'>Hide all</button>
        </div-->

        <div ng-show="node.parentInfo">
            <h2>Parent</h2>
            <p>
                <a href='#' ng-click="selectNodeFromDetails(node.parentInfo);">
                    {{node.parentInfo.name}}
                    ({{node.parentInfo.footprintMetricValue}} / {{node.parentInfo.heightMetricValue}})
                </a>
            </p>
        </div>

        <h2>Children ({{node.children.length}})</h2>
        <ul style="list-style: none;">
            <li ng-repeat="child in node.children">
                <a href='#' ng-click="selectNodeFromDetails(child);">
                    {{child.name}}
                    ({{child.footprintMetricValue}} / {{child.heightMetricValue}})
                </a>
            </li>
            <li ng-if="node.children.length == 0">
                <strong>No children</strong>
            </li>
        </ul>
    </div>

    <div ng-controller="RenderController" id="renderContainerController">
        <div ng-show="isVisualisationActive" id="renderContainer"
             ng-mousedown="mousedown($event)" ng-mouseup="mouseup($event)" ng-mousemove="mousemove($event)"
             style="border: 1px solid black;">
        </div>
        <div ng-hide="isVisualisationActive" style="padding: 30px; height: 300px;">
            <h3>Please select the metrics and a view type and submit the form above.</h3>
        </div>
    </div>

    <script type="text/javascript">
        <%

        if (params[:viewType].blank?)

        else
            %>
            if (!Detector.webgl) {
                Detector.addGetWebGLMessage();
            }

            function loadObjects() {
                <%
                # get extension class and start layout
                softVis3D = Api::Utils.java_facade.
                        getComponentByClassname('softVis3D', 'de.rinderle.softvis3d.SoftVis3DExtension')

                resultMap = softVis3D.createLayoutBySnapshotId(@snapshot.id, params[:metric1], params[:metric2], params[:viewType])

                # show all graph (as layers)
                resultMap.each do |key, platform|
                     # set bb (position and size)
                     layerBB = platform.getBoundingBox
                    %>
                    position = new Array();
                    position.x = <%= layerBB.getX() %>;
                    position.y = <%= platform.getHeight3d.to_s %>;
                    position.z = <%= layerBB.getY() %>;

                    geometryLayer = new THREE.BoxGeometry(<%= layerBB.getWidth %>,
                            <%= platform.getPlatformHeight.to_s %>,
                            <%= layerBB.getHeight %>);

                    // set material (color)
                    layerMaterial = new THREE.MeshLambertMaterial({
                        color: <%= platform.getColor.getHex %>,
                        transparent: true,
                        opacity: <%= platform.getOpacity.to_s %>
                    });

                    // <%= platform.to_s %>
                    angular.element(document.getElementById('renderContainerController')).scope().createBox(geometryLayer, layerMaterial, position, "<%= key %>", "node");

                    <%
                    # show all treeNodes
                    platform.getNodes.each { |building|
                        %>
                        var nodeMaterial = new THREE.MeshLambertMaterial({
                            color: <%= building.getColor.getHex %>,
                            transparent: true,
                            opacity: <%= platform.getOpacity.to_s %>
                        });
                        <%
                        point = building.getPosition()
                        pointArray = point.to_s.split(',')
                        heightString = building.getBuildingHeight
                       %>
                        var nodeGeometry = new THREE.BoxGeometry(
                                <%= building.getWidth.to_s %>, <%= heightString %>,
                                <%= building.getHeight().to_s %>);

                        var position = new Array();
                        position.x = <%= pointArray[0] %>;
                        <% zPos = building.getHeight3d.to_f + heightString.to_f / 2 %>
                        position.y = <%= zPos.to_s %>;
                        position.z = <%= pointArray[1] %>;

                        // <%= building.to_s %>
                        angular.element(document.getElementById('renderContainerController')).scope().createBox(nodeGeometry, nodeMaterial, position, "<%= building.getId %>", "leaf");

                        <%
                        # show all treeEdges
                        building.getArrows.each { |arrow| %>
                            // <%= arrow.to_s %>
                            angular.element(document.getElementById('renderContainerController')).scope().drawCylinder(<%= arrow.getOrigin.to_s %>,
                                         <%= arrow.getDestination.to_s %>,
                                         "<%= arrow.getTailId.to_s %> -> <%= arrow.getHeadId.to_s %>",
                                         <%= arrow.getRadius.to_s %>);
                        <%
                        }
                    }
                end
                %>
            }
            <%
    end
    %>

</script>
</div>

<script type="text/javascript">

</script>

<script type="text/javascript">
window.onload = function () {

    angular.element(document.getElementById('renderContainerController')).scope().init(
            <%= @snapshot.id %>, <%= params[:metric1] %>, <%= params[:metric2] %>, "<%= params[:viewType] %>"
    );

    angular.element(document.getElementById('detailsContainer')).scope().loadTree(
            <%= @snapshot.id %>, <%= params[:metric1] %>, <%= params[:metric2] %>, "<%= params[:viewType] %>"
    );

    loadObjects();

}
</script>

