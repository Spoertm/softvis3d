<!--

    SoftVis3D Sonar plugin
    Copyright (C) 2014 Stefan Rinderle
    stefan@rinderle.info

    SoftVis3D Sonar plugin can not be copied and/or distributed without the express
    permission of Stefan Rinderle.

-->
<script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/threeJS/three.min.js"></script>
<script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/threeJS/NURBSCurve.js"></script>
<script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/threeJS/NURBSUtils.js"></script>

<script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/threeJS/OrbitControls.js"></script>

<script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/threeJS/Detector.js"></script>
<script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/threeJS/stats.min.js"></script>

<script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/angular/angular.min.js"></script>

<!--
<script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/angular/ui-bootstrap-tpls-0.12.0.min.js"></script>

<link rel="stylesheet" type="text/css" href="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/css/bootstrap.min.css">
-->
<link rel="stylesheet" type="text/css" href="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/css/main.css">

<%
   # get extension class and start layout
   softVis3D = Api::Utils.java_facade.
           getComponentByClassname('softVis3D', 'de.rinderle.softvis3d.SoftVis3DExtension')
%>

<% if (softVis3D.isProd()) %>
    <script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/js/softvis3d.min.js"></script>
<% else %>
    <script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/js/SoftVis3dAngular.js"></script>
    <script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/js/BackendService.js"></script>
    <script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/js/CreateObjectsService.js"></script>
    <script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/js/DetailsController.js"></script>
    <script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/js/Directives.js"></script>
    <script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/js/RenderController.js"></script>
    <script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/js/SceneObjectsService.js"></script>
    <script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/js/TreeService.js"></script>
<% end %>

<div ng-app="softVis3dAngular" resize>

    <div id="metricForm" style="height: 30px;">
        <%
           metricIds = softVis3D.getMetricsForSnapshot(@snapshot.id)

           # get all defined metric for project files
           metrics=[]
           metricIds.each do |index|
             m = metric(index)
             metrics << m if m
           end

           # set default metric ids if no metrics selected
           if (params[:metric1].blank?)
             puts("no param 1 - default param")
             params[:metric1] = softVis3D.getMetric1FromSettings().to_s
           end
           if (params[:metric2].blank?)
             puts("no param 2 - default param")
             params[:metric2] = softVis3D.getMetric2FromSettings().to_s
           end
        %>
        <% form_tag({:action => @resource.id.to_s}, {:id => 'softVis3DForm', :method => 'get'}) do %>
            <input type="hidden" name="page" value="SoftVis3D">

            Building footprint metric:
            <select name="metric1">
                <%
                   # show all graph (as layers)
                   metrics.each do |metric|
                     if (metric.id.to_s==params[:metric1].to_s)
                %>
                        <option value="<%= metric.id %>" selected><%= metric.short_name %></option>
                    <% else %>
                        <option value="<%= metric.id %>"><%= metric.short_name %></option>
                    <% end %>
                <%
                   end
                %>
            </select>

            Building height metric:

            <select name="metric2">
                <%
                   # show all graph (as layers)
                   metrics.each do |metric|
                     if (metric.id.to_s==params[:metric2].to_s)
                %>
                        <option value="<%= metric.id %>" selected><%= metric.short_name %></option>
                    <% else %>
                        <option value="<%= metric.id %>"><%= metric.short_name %></option>
                    <% end %>
                <%
                   end
                %>
            </select>

            View type:
            <select name="viewType">
                <%
                   if ("city"==params[:viewType].to_s)
                %>
                    <option value="city" selected>City</option>
                <% else %>
                    <option value="city">City</option>
                <% end %>
                <%
                   if ("dependency"==params[:viewType].to_s)
                %>
                    <option value="dependency" selected>Dependency</option>
                <% else %>
                    <option value="dependency">Dependency</option>
                <% end %>
            </select>

            <input type="submit" value="Submit">
        <% end %>
    </div>

    <div ng-controller="DetailsController" id="detailsContainer" ng-show="node || edge"
         style="border: 1px solid black; position: absolute;
                 top: 40px; right: 10px; width: 200px; height: 300px;
                 overflow: auto;">

        <!-- NODE MAIN INFO -->

        <div ng-show="node">
            <button type='button' ng-click='showAllSceneElements();'>Show all objects (reset)</button>
            <br /><br />

            <h2 style="color: #FFBF00">{{node.name}}
                <span ng-show="!node.isNode">({{node.footprintMetricValue}} / {{node.heightMetricValue}})</span>
                <button ng-show="node.isNode" type='button' ng-click='hideAllSceneElementsExceptIdTree(node.id);'>Focus this</button>
            </h2>
        </div>

        <!-- EDGE MAIN INFO -->

        <div ng-if="edge">
            <h2 style="color: #FFBF00">
                {{edge.sourceName | inDisplay}} -> {{edge.destinationName | outDisplay}} ({{edge.includingDependencies.length}})
            </h2>
            <br />
            <button type='button' ng-click='selectAllDependentDependencies(edge);'>
                Select all depending
            </button>
            <br /><br />
        </div>

        <!-- NODE INCLUDING EDGE DETAILS -->

        <div ng-if="(inEdges.length + outEdges.length) > 0">
            <br />
            <h2>
                <img ng-hide="displayEdges" ng-click="triggerDisplayEdges();" style="vertical-align: top;"
                     src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/images/tree_plus.gif"/>
                <img ng-show="displayEdges" ng-click="triggerDisplayEdges();" style="vertical-align: top;"
                     src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/images/tree_minus.gif"/>
                Dependencies ({{inEdges.length + outEdges.length}})
            </h2>
            <ul ng-show="displayEdges" style="list-style: none;">
                <h3>Inbound</h3>
                <li ng-repeat="edge in inEdges">
                    <img ng-hide="edge.displayDetails" ng-click="triggerDisplayEdgeDetails(edge);" style="vertical-align: top;"
                         src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/images/tree_plus.gif"/>
                    <img ng-show="edge.displayDetails" ng-click="triggerDisplayEdgeDetails(edge);" style="vertical-align: top;"
                         src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/images/tree_minus.gif"/>
                    <a href='#' ng-click="selectAllDependentDependencies(edge);">
                        {{edge.sourceName | inDisplay}} -> ({{edge.includingDependencies.length}})
                    </a>
                    <ul ng-show="edge.displayDetails" style="list-style: circle;">
                        <li ng-repeat="dependency in edge.includingDependencies" ng-class="{listEven: $even}">
                            <a href='#' ng-click="selectAllDependentDependenciesById(dependency.id);">
                                {{dependency.displayValue}}
                            </a>
                        </li>
                    </ul>
                </li>
                <h3>Outbound</h3>
                <li ng-repeat="edge in outEdges">
                    <img ng-hide="edge.displayDetails" ng-click="triggerDisplayEdgeDetails(edge);" style="vertical-align: top;"
                         src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/images/tree_plus.gif"/>
                    <img ng-show="edge.displayDetails" ng-click="triggerDisplayEdgeDetails(edge);" style="vertical-align: top;"
                         src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/images/tree_minus.gif"/>
                    <a href='#' ng-click="selectAllDependentDependencies(edge);">
                        -> {{edge.destinationName | outDisplay}} ({{edge.includingDependencies.length}})
                    </a>
                    <ul ng-show="edge.displayDetails" style="list-style: circle;">
                        <li ng-repeat="dependency in edge.includingDependencies" ng-class="{listEven: $even}">
                            <a href='#' ng-click="selectAllDependentDependenciesById(dependency.id);">
                                {{dependency.displayValue}}
                            </a>
                        </li>
                    </ul>
                </li>
            </ul>
        </div>

        <!-- EDGE INCLUDING EDGE DETAILS -->
        <div ng-show="edgeIncludingEdges">
            <h2>
                <img ng-hide="displayEdgeIncludingEdges" ng-click="triggerDisplayEdgeIncludingEdges();" style="vertical-align: top;"
                     src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/images/tree_plus.gif"/>
                <img ng-show="displayEdgeIncludingEdges" ng-click="triggerDisplayEdgeIncludingEdges();" style="vertical-align: top;"
                     src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/images/tree_minus.gif"/>
                Including dependencies
            </h2>
            <ul ng-show="displayEdgeIncludingEdges" style="list-style: circle;">
                <li ng-repeat="dependency in edgeIncludingEdges" ng-class="{listEven: $even}">
                    <a href='#' ng-click="selectAllDependentDependenciesById(dependency.id);">
                        {{dependency.displayValue}}
                    </a>
                </li>
            </ul>
        </div>

        <br />
        <h2>Navigation</h2>

        <!-- NODE NAVIGATION -->
        <div ng-show="node.parentInfo">
            <br />
            <h3>Parent</h3>
            <p>
                <a href='#' ng-click="selectSceneObjectFromDetails(node.parentInfo.id, node.parentInfo.type);">
                    {{node.parentInfo.name}}
                </a>
            </p>
        </div>

        <div ng-if="node.children.length > 0">
            <br />

            <h3>
                <img ng-hide="displayChildren" ng-click="triggerDisplayChildren();" style="vertical-align: top;"
                     src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/images/tree_plus.gif"/>
                <img ng-show="displayChildren" ng-click="triggerDisplayChildren();" style="vertical-align: top;"
                     src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/images/tree_minus.gif"/>
                Children ({{node.children.length}})
            </h3>
            <ul ng-show="displayChildren" style="list-style: none;">
                <li ng-repeat="child in node.children">
                    <img ng-hide="child.isNode" style="vertical-align: top;"
                         src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/images/file.gif"/>
                    <img ng-show="child.isNode" style="vertical-align: top;"
                         src="<%= "#{ApplicationController.root_context}" -%>/static/softVis3D/images/folder.gif"/>
                    <a href='#' ng-click="selectSceneObjectFromDetails(child.id, child.type);">
                        {{ child.name | limitTo:21 }}{{child.name.length > 21 ? '...' : ''}}
                        <span ng-show="!child.isNode">({{child.footprintMetricValue}}/{{child.heightMetricValue}})</span>
                    </a>
                </li>
            </ul>
        </div>

        <!-- EDGE NAVIGATION -->
        <div ng-if="edge">
            <h3>Source</h3>
            <a href='#' ng-click="selectSceneObjectFromDetails(edge.sourceId, 'node');">
                {{ edge.sourceName }}
            </a>
            <h3>Destination</h3>
            <a href='#' ng-click="selectSceneObjectFromDetails(edge.destinationId, 'node');">
                {{ edge.destinationName }}
            </a>
        </div>
    </div>

    <div ng-controller="RenderController" id="renderContainerController">
        <div ng-show="isVisualisationActive" id="renderContainer"
             ng-mousedown="mousedown($event)" ng-mouseup="mouseup($event)" ng-mousemove="mousemove($event)"
             style="border: 1px solid black;">
        </div>
        <div ng-show="!isVisualisationActive && !isLoading" style="padding: 30px; height: 300px;">
            <h3>Please select the metrics and a view type and submit the form above.</h3>
        </div>
        <div ng-show="!isVisualisationActive && isLoading" style="padding: 30px; height: 300px;">
            <h3>LOADING - please wait..</h3>
        </div>
    </div>
</div>

<script type="text/javascript">
    softVis3dAngular.factory('createObjectsService',
            ['sceneObjectsService',
                function (sceneObjectsService) {
                    var service = {

                        createObjects: function (platformArray) {
                            for (var i = 0; i < platformArray.webserviceResult.length; i++) {
                                service.createPlatform(platformArray.webserviceResult[i]);
                            }
                        },

                        createPlatform: function(platform) {
                            var position = new Array();
                            position.x = platform.positionX;
                            position.y = platform.height3d;
                            position.z = platform.positionY;

                            var geometryLayer = new THREE.BoxGeometry(
                                    platform.width, platform.platformHeight, platform.height);

                            var layerMaterial = new THREE.MeshLambertMaterial({
                                color: platform.color,
                                transparent: true,
                                opacity: platform.opacity
                            });

                            service.createBox(geometryLayer, layerMaterial, position, platform.platformId, "node");

                            for (var i = 0; i < platform.nodes.length; i++) {
                                service.createBuilding(platform.nodes[i]);
                            }
                        },

                        createBuilding: function(building) {
                            var nodeMaterial = new THREE.MeshLambertMaterial({
                                color: building.color,
                                transparent: true,
                                opacity: 1
                            });

                            var nodeGeometry = new THREE.BoxGeometry(
                                    building.width, building.buildingHeight, building.height);

                            var position = new Array();
                            position.x = building.positionX;
                            position.y = building.height3d + building.buildingHeight / 2;
                            position.z = building.positionY;

                            service.createBox(nodeGeometry, nodeMaterial, position, building.id, "leaf");

                            for (var i = 0; i < building.arrows.length; i++) {
                                service.createArrow(building.arrows[i]);
                            }
                        },

                        createBox: function(geometry, material, position, id, type) {
                            var object = new THREE.Mesh(geometry, material);

                            object.position.x = position.x;
                            object.position.y = position.y;
                            object.position.z = position.z;

                            object.softVis3dId = id;
                            object.softVis3dType = type;

                            sceneObjectsService.push(object);
                        },

                        createArrow: function(arrow) {
                            service.createSpline(arrow);

                            var pointsLength = arrow.translatedPoints.length;
                            service.createArrowHead(arrow.translatedPoints[pointsLength - 2],
                                    arrow.translatedPoints[pointsLength - 1],
                                    arrow);
                        },

                        createSpline: function (arrow) {
                            var radius = 1 + (10 * (arrow.radius / 100));
                            // NURBS curve

                            var nurbsControlPoints = [];
                            var nurbsKnots = [];
                            var nurbsDegree = 3;

                            for ( var i = 0; i <= nurbsDegree; i ++ ) {

                                nurbsKnots.push( 0 );

                            }

                            for (var i = 0; i < arrow.translatedPoints.length; i++) {
                                nurbsControlPoints.push(
                                        new THREE.Vector4(
                                                arrow.translatedPoints[i].x,
                                                arrow.translatedPoints[i].y,
                                                arrow.translatedPoints[i].z,
                                                1 // weight of control point: higher means stronger attraction
                                        )
                                );

                                var knot = ( i + 1 ) / ( arrow.translatedPoints.length - nurbsDegree );
                                nurbsKnots.push( THREE.Math.clamp( knot, 0, 1 ) );

                            }

                            var nurbsCurve = new THREE.NURBSCurve(nurbsDegree, nurbsKnots, nurbsControlPoints);

                            var nurbsGeometry = new THREE.Geometry();
                            nurbsGeometry.vertices = nurbsCurve.getPoints(200);
                            var nurbsMaterial = new THREE.LineBasicMaterial( { linewidth: radius, color: arrow.color, transparent: true } );

                            var nurbsLine = new THREE.Line( nurbsGeometry, nurbsMaterial );
                            nurbsLine.softVis3dId = arrow.id;
                            nurbsLine.softVis3dType = "dependency";
                            sceneObjectsService.push( nurbsLine );
                        },

                        createArrowHead: function (startPoint, endPoint, arrow) {
                            var pointXVector = service.createVectorFromPoint(startPoint);
                            var pointYVector = service.createVectorFromPoint(endPoint);
                            var orientation = new THREE.Matrix4();
                            /* THREE.Object3D().up (=Y) default orientation for all objects */
                            orientation.lookAt(pointXVector, pointYVector, new THREE.Object3D().up);
                            /* rotation around axis X by -90 degrees
                             * matches the default orientation Y
                             * with the orientation of looking Z */
                            orientation.multiply(new THREE.Matrix4(1, 0, 0, 0,
                                    0, 0, 1, 0,
                                    0, -1, 0, 0,
                                    0, 0, 0, 1));

                            /* thickness is in percent at the moment */
                            var radius = 1 + (10 * (arrow.radius / 100));

                            // add head
                            /* cylinder: radiusAtTop, radiusAtBottom,
                             height, radiusSegments, heightSegments */
                            var edgeHeadGeometry = new THREE.CylinderGeometry(1, radius + 3, 10, 8, 1);
                            var edgeHead = new THREE.Mesh(edgeHeadGeometry,
                                    new THREE.MeshBasicMaterial({ color: arrow.color }));

                            edgeHead.applyMatrix(orientation);
                            edgeHead.applyMatrix(new THREE.Matrix4().makeTranslation(
                                    pointYVector.x, pointYVector.y, pointYVector.z));

                            edgeHead.softVis3dId = arrow.id;
                            edgeHead.softVis3dType = "dependency";
                            sceneObjectsService.push(edgeHead);
                        },

                        createVectorFromPoint: function (point) {
                            return new THREE.Vector3(point.x, point.y, point.z);
                        }

                    };

                    return service;
                }]);

window.onload = function () {
    <%
    if !@snapshot.id.blank? && !params[:viewType].blank? &&
        !params[:metric1].blank? && !params[:metric2].blank?
    %>
        // Direct link to visualization. Load and display.
        angular.element(document.getElementById('renderContainerController')).scope().loadVisualization(
                <%= @snapshot.id %>, <%= params[:metric1] %>, <%= params[:metric2] %>, "<%= params[:viewType] %>"
        );
    <%
    else
    %>
        // no direct link to visualization. Do nothing,
    <%
    end
    %>
}
</script>

