<script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softviz3d/threeJS/three.min.js"></script>

<script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softviz3d/threeJS/OrbitControls.js"></script>

<script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softviz3d/threeJS/Detector.js"></script>
<script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softviz3d/threeJS/stats.min.js"></script>

<script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softviz3d/js/ThreeScene.js"></script>

<div id="metricForm" style="height: 30px;">
  <%
     # get extension class and start layout
     softviz3d = Api::Utils.java_facade.
             getComponentByClassname('softviz3d', 'de.rinderle.softviz3d.SoftViz3dExtension')

     metricIds = softviz3d.getMetricsForSnapshot(@snapshot.id)
    
    # get all defined metric for project files
     metrics=[]
     metricIds.each do |index|
       m = metric(index)
       metrics << m if m
     end

    # set default metric ids if no metrics selected
    if (params[:metric1].blank?) 
       puts("no param 1 - default param")
       params[:metric1] = softviz3d.getMetric1FromSettings().to_s
    end
    if (params[:metric2].blank?) 
       puts("no param 2 - default param")
       params[:metric2] = softviz3d.getMetric2FromSettings().to_s
    end
    if (params[:viewType].blank?)
      puts("no viewType - default param")
      params[:viewType] = "city";
    end
  %>
  <% form_tag({:action => @resource.id.to_s}, {:id => 'softviz3dForm', :method => 'get'}) do %>
      <input type="hidden" name="page" value="Softviz3d">
      
      Building footprint metric:
      <select name="metric1">
        <%
           # show all graph (as layers)
           metrics.each do |metric|
             if (metric.id.to_s==params[:metric1].to_s)
        %>
                <option value="<%= metric.id %>" selected><%= metric.short_name %></option>
            <% else %>
                <option value="<%= metric.id %>"><%= metric.short_name %></option>
            <% end %>
        <%
           end
        %>
      </select>

      Building height metric:

      <select name="metric2">
        <%
           # show all graph (as layers)
           metrics.each do |metric|
             if (metric.id.to_s==params[:metric2].to_s)
        %>
                <option value="<%= metric.id %>" selected><%= metric.short_name %></option>
            <% else %>
                <option value="<%= metric.id %>"><%= metric.short_name %></option>
            <% end %>
        <%
           end
        %>
      </select>

        View type:
        <select name="viewType">
            <%
            if ("city"==params[:viewType].to_s)
            %>
                <option value="city" selected>City</option>
            <% else %>
                <option value="city">City</option>
            <% end %>
            <%
               if ("dependency"==params[:viewType].to_s)
            %>
                <option value="dependency" selected>Dependency</option>
            <% else %>
                <option value="dependency">Dependency</option>
            <% end %>
        </select>

      <input type="submit" value="Submit">
  <% end %>
</div>

<div id="renderContainer" style="border: 1px solid black;"></div>

<script type="text/javascript">

    var tree;

    function initializeWebservice(snapshotId, footprintMetricId, heightMetricId) {
        callAjax("../../api/softViz3d/initialize?snapshotId=" + snapshotId
                        + "&footprintMetricId=" + footprintMetricId + "&heightMetricId=" + heightMetricId,
                function(response) {
                    var myArray = JSON.parse(response);
                    console.log(myArray);
                    tree = myArray;
                });
    }

    function searchTree(element, id){
        if(element.id == id){
            return element;
        } else if (element.children != null){
            var result = null;
            for(var i=0; result == null && i < element.children.length; i++){
                result = searchTree(element.children[i], id);
            }
            return result;
        }
        return null;
    }

</script>

<script type="text/javascript">
    if (!Detector.webgl) {
        Detector.addGetWebGLMessage();
    }

    init(document.getElementById('renderContainer'), true);
    createCenterCube();
    animate();
</script>

<script type="text/javascript">
    initializeWebservice(<%= @snapshot.id %>, <%= params[:metric1] %>, <%= params[:metric2] %>);

    // city or dependency
    var viewType = "<%= params[:viewType]; %>";

    function v( x, y, z ){ return new THREE.Vector3( x, y, z ); }

   <%
   # get extension class and start layout
   softviz3d = Api::Utils.java_facade.
           getComponentByClassname('softviz3d', 'de.rinderle.softviz3d.SoftViz3dExtension')

   resultMap = softviz3d.createLayoutBySnapshotId(@snapshot.id, params[:metric1], params[:metric2], params[:viewType])

   # show all graph (as layers)
   resultMap.each do |key, value|
        # set bb (position and size)
        layerBB = value.getAttributeValue('bb')
       %>
        position = new Array();
        position.x = <%= layerBB.getX() %>;
        position.y = <%= value.getAttributeValue('layerHeight3d') %>;
        position.z = <%= layerBB.getY() %>;

        <% heightString = value.getAttributeValue('buildingHeight').to_s %>

        geometryLayer = new THREE.BoxGeometry(<%= layerBB.getWidth() %>, 5,
                <%= layerBB.getHeight() %>);

        // set material (color)
        layerMaterial = new THREE.MeshLambertMaterial({
            color: <%= value.getAttributeValue('color').getHex %>,
            transparent: true,
            opacity: <%= value.getAttributeValue('opacity') %>
            });

        // <%= value.to_s %>
        createBox(geometryLayer, layerMaterial, position, "<%= key %>", "node");

        <%
        # show all treeNodes
        value.nodeElementsAsArray.each { |val|
            %>
            var nodeMaterial = new THREE.MeshLambertMaterial({
                color: <%= val.getAttributeValue('nodesColor') %>,
                transparent: true,
                opacity: <%= value.getAttributeValue('opacity') %>
            });
            <%
            point = val.getAttributeValue('pos')
            pointArray = point.to_s.split(',')
            heightString = val.getAttributeValue('buildingHeight')
           %>
            var nodeGeometry = new THREE.BoxGeometry(
                    <%= val.getAttributeValue('width').to_s %>, <%= heightString %>,
                    <%= val.getAttributeValue('height').to_s %>);

            var position = new Array();
            position.x = <%= pointArray[0] %>;
            <% zPos = val.getAttributeValue('layerHeight3d').to_f + heightString.to_f / 2 %>
            position.y = <%= zPos.to_s %>;
            position.z = <%= pointArray[1] %>;

            // <%= val.to_s %>
            createBox(nodeGeometry, nodeMaterial, position, "<%= val.getAttributeValue('id') %>", "leaf");
            <%
        }
        %>
        <%
        # show all treeEdges
        value.edgeElementsAsArray.each { |val|
        %>
            // <%= val.to_s %>
            drawCylinder(v(<%= val.getAttributeValue("origin").to_s %>),
                v(<%= val.getAttributeValue("destination").to_s %>));
        <%
    }
    end
    %>

    function drawCylinder( pointX, pointY) {
        /* edge from X to Y */
        var direction = new THREE.Vector3().subVectors( pointY, pointX );
        var orientation = new THREE.Matrix4();
        /* THREE.Object3D().up (=Y) default orientation for all objects */
        orientation.lookAt(pointX, pointY, new THREE.Object3D().up);
        /* rotation around axis X by -90 degrees
         * matches the default orientation Y
         * with the orientation of looking Z */
        orientation.multiply(new THREE.Matrix4(1,0,0,0,
                0,0,1,0,
                0,-1,0,0,
                0,0,0,1));

        /* cylinder: radiusAtTop, radiusAtBottom,
         height, radiusSegments, heightSegments */
        var radius = 4;
        var edgeGeometry = new THREE.CylinderGeometry( radius, radius, direction.length(), 8, 1);
        var edge = new THREE.Mesh( edgeGeometry,
                new THREE.MeshBasicMaterial( { color: 0xff0000 } ) );

        edge.applyMatrix(orientation);
        direction = direction.multiplyScalar(0.5);

        edge.applyMatrix( new THREE.Matrix4().makeTranslation(
                        pointX.x + direction.x, pointX.y + direction.y, pointX.z + direction.z));

        scene.add(edge);

        // add head
        /* cylinder: radiusAtTop, radiusAtBottom,
         height, radiusSegments, heightSegments */
        var edgeHeadGeometry = new THREE.CylinderGeometry( 1, 10, 10, 8, 1);
        var edgeHead = new THREE.Mesh( edgeHeadGeometry,
                new THREE.MeshBasicMaterial( { color: 0xff0000 } ) );

        edgeHead.applyMatrix(orientation);
        edgeHead.applyMatrix( new THREE.Matrix4().makeTranslation(
                        pointY.x, pointY.y, pointY.z));

        scene.add(edgeHead);
    }

   setLight();

</script>

<div id="detailsContainer"
     style="border: 1px solid blue; position: absolute;
             top: 40px; right: 10px; width: 200px; height: 200px;">
</div>

<script type="text/javascript">

    function showDetails(snapshotId, type) {
        var node = searchTree(tree, snapshotId);

         var result = "<h3>Selected</h3>";

         result +=  node.name + " " + node.id + " " + type + " ";
         result += "(" + node.footprintMetricValue;
         result += "/" + node.heightMetricValue + ")";

        if (viewType == "city") {
            if (node.isNode) {
                var selectId;
                if (node.parentInfo == null) {
                    selectId = node.id;
                } else {
                    selectId = node.parentInfo.id;
                }

                if (node.isHidden != null && node.isHidden) {
                    result += "&nbsp;<button type='button' " +
                            "onclick=\"showAll('" + node.id + "', '" + selectId + "');\">" +
                            "Show all</button>";
                } else {
                    result += "&nbsp;<button type='button' " +
                            "onclick=\"hideAll('" + node.id + "', '" + selectId + "');\">" +
                            "Hide all</button>";
                }
            }
        } else if (viewType == "dependency") {
            if (node.isNode && type == "node") {
                if (node.isHidden != null && node.isHidden) {
                    result += "&nbsp;<button type='button' " +
                            "onclick=\"showNode('" + node.id + "', '" + node.id + "');\">" +
                            "Show node</button>";
                } else {
                    result += "&nbsp;<button type='button' " +
                            "onclick=\"hideNode('" + node.id + "', '" + node.children[0].id + "');\">" +
                            "Hide node</button>";
                }
            }
        }

        result += "<br /><br />";

        if (node.parentInfo != null) {
            result += "<h3>Parent (" + node.parentInfo.id + ")</h3>";

            result += "<a href='#' onClick='selectSceneObject(" + node.parentInfo.id + ");return false'>";

            result +=  node.parentInfo.name + " ";
            result += "(" + node.parentInfo.footprintMetricValue;
            result += "/" + node.parentInfo.heightMetricValue + ")<br /><br />";

            result += "</a>";
        }

        result += "<h3>Children</h3>";
        var children = node.children;
        for (var index = 0; index < children.length; ++index) {
            var child = children[index];

            result += "<a href='#' onClick='selectSceneObject(" + child.id + ");return false'>";

            result += child.name + " " + node.id + " ";
            result += "(" + child.footprintMetricValue;
            result += "/" + child.heightMetricValue + ")";

            result += "</a>";

            if (viewType == "city") {
                if (child.isNode) {
                    var selectId;
                    if (child.parentInfo == null) {
                        selectId = child.id;
                    } else {
                        selectId = child.parentInfo.id;
                    }

                    if (child.isHidden != null && child.isHidden) {
                        result += "&nbsp;<button type='button' " +
                                "onclick=\"showAll('" + child.id + "', '" + selectId + "');\">" +
                                "Show all</button>";
                    } else {
                        result += "&nbsp;<button type='button' " +
                                "onclick=\"hideAll('" + child.id + "', '" + selectId + "');\">" +
                                "Hide all</button>";
                    }
                }
            }
            result += "<br />";
        }

        document.getElementById('detailsContainer').innerHTML = result;
    }

    function selectSceneObject(id) {
        for (var index = 0; index < objects.length; index++) {
            if (id == objects[index].softviz3dId) {
                // reset former selected object
                if (!!selectedObject) {
                    selectedObject.material.color.setHex(selectedObjectColor);
                }

                selectedObject = objects[index];
                selectedObjectColor = selectedObject.material.color.getHex();
                selectedObject.material.color.setHex(0xFFBF00);

                showDetails(objects[index].softviz3dId, objects[index].type);
            }
        }
    }

    function selectSceneObjectByType(id, type) {
        for (var index = 0; index < objects.length; index++) {
            if (id == objects[index].softviz3dId && type == objects[index].type) {
                // reset former selected object
                if (!!selectedObject) {
                    selectedObject.material.color.setHex(selectedObjectColor);
                }

                selectedObject = objects[index];
                selectedObjectColor = selectedObject.material.color.getHex();
                selectedObject.material.color.setHex(0xFFBF00);

                showDetails(objects[index].softviz3dId, objects[index].type);
            }
        }
    }

    function showAll(id, selectId) {
        showNodeAndAllParents(id);
        selectSceneObject(selectId);
    }

    function showNode(id, selectId) {
        showNodeAndChildren(id);
        selectSceneObjectByType(selectId, "node");
    }

    function showNodeAndAllParents(id) {
        showSingleNode(id);

        var node = searchTree(tree, id);
        if (node != null) {
            node.isHidden = false;
            for (var index = 0; index < node.children.length; index++) {
                showNodeAndAllParents(node.children[index].id);
            }
        }
    }

    function showSingleNode(id) {
        for (var index = 0; index < objects.length; index++) {
            if (id == objects[index].softviz3dId) {
                scene.add(objects[index]);
                objectsInView[index] = objects[index];
            }
        }
    }

    function hideAll(id, selectId) {
        removeNodeAndAllChildren(id);
        selectSceneObject(selectId);
    }

    function removeNodeAndAllChildren(id) {
        removeNode(id);

        var node = searchTree(tree, id);
        if (node != null) {
            node.isHidden = true;
            for (var index = 0; index < node.children.length; index++) {
                removeNodeAndAllChildren(node.children[index].id);
            }
        }
    }

    var emptyObjectMaterial = new THREE.MeshBasicMaterial( { color: 0x00ff00, opacity: 0.5 } );
    var emptyObjectGeometry = new THREE.BoxGeometry( 0, 0, 0 );
    var emptyObject = new THREE.Mesh( emptyObjectGeometry,  emptyObjectMaterial);
    emptyObject.position.x = 0;
    emptyObject.position.y = 0;
    emptyObject.position.z = 0;

    function removeNode(id) {
        for (var index = 0; index < objects.length; index++) {
            if (id == objects[index].softviz3dId) {
                objectsInView[index] = emptyObject;
                scene.remove(objects[index]);
            }
        }
    }

    function hideNode(id, selectId) {
        removeNodeAndChildren(id);
        selectSceneObjectByType(selectId, "node");
    }

    function removeNodeAndChildren(id) {
        removeNodeByType(id, "node");

        var node = searchTree(tree, id);
        if (node != null) {
            node.isHidden = true;
            for (var index = 0; index < node.children.length; index++) {
                removeNodeByType(node.children[index].id, "leaf");
            }
        }
    }

    function removeNodeByType(id, type) {
        for (var index = 0; index < objects.length; index++) {
            if (id == objects[index].softviz3dId && type == objects[index].type) {
                objectsInView[index] = emptyObject;
                scene.remove(objects[index]);
            }
        }
    }

    function showNodeAndChildren(id) {
        showSingleNode(id);

        var node = searchTree(tree, id);
        if (node != null) {
            node.isHidden = false;
            for (var index = 0; index < node.children.length; index++) {
                showSingleNode(node.children[index].id);
                node.children[index].isHidden = false;
            }
        }
    }
</script>