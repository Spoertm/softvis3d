<div id="renderContainer" style="border: 1px solid red;"></div>

<script src="http://threejs.org/build/three.min.js"></script>

<script src="http://threejs.org/examples/js/controls/OrbitControls.js"></script>

<script src="http://threejs.org/examples/js/Detector.js"></script>
<script src="http://threejs.org/examples/js/libs/stats.min.js"></script>

<script>
	if (!Detector.webgl)
		Detector.addGetWebGLMessage();

	var container, stats;

	var camera, controls, scene, renderer;

	var cross;

	init();
	animate();

	function init() {

		camera = new THREE.PerspectiveCamera(60, window.innerWidth
				/ window.innerHeight, 1, 1000);
		camera.position.z = 500;

		controls = new THREE.OrbitControls(camera);
		controls.addEventListener('change', render);

		scene = new THREE.Scene();
		//scene.fog = new THREE.FogExp2(0xffffff, 0.00000000002);

		// world

		//var geometry = new THREE.CylinderGeometry( 0, 10, 30, 4, 1 );
		var geometry = new THREE.CubeGeometry(10, 10, 10);

		var greenMaterial = new THREE.MeshBasicMaterial({
			color : 0x00ff00
		});
		position = new Array();
		position.x = 0;
		position.y = 50;
		position.z = 0;
		createBox(geometry, greenMaterial, position);

        position = new Array();
        position.x = 0;
        position.y = -50;
        position.z = 0;
        createBox(geometry, greenMaterial, position);

        position = new Array();
        position.x = 200;
        position.y = 0;
        position.z = 0;
        createBox(geometry, greenMaterial, position);

        position = new Array();
        position.x = 0;
        position.y = 0;
        position.z = 200;
        createBox(geometry, greenMaterial, position);

		// lights

		light = new THREE.DirectionalLight( 0xffffff );
		light.position.set( 1, 1, 1 );
		scene.add( light );

		light = new THREE.DirectionalLight( 0x002288 );
		light.position.set( -1, -1, -1 );
		scene.add( light );

		light = new THREE.AmbientLight( 0x222222 );
		scene.add( light );

		// renderer

		renderer = new THREE.WebGLRenderer({
			antialias : false
		});
		renderer.setClearColor(0xffffff, 1);

		container = document.getElementById('renderContainer');
		container.appendChild(renderer.domElement);

		stats = new Stats();
		stats.domElement.style.position = 'absolute';
		stats.domElement.style.top = '0px';
		stats.domElement.style.zIndex = 100;
		container.appendChild(stats.domElement);

		window.addEventListener('resize', onWindowResize, false);
		onWindowResize()
	}

	function createBox(geometry1, material1, position1) {
		var mesh = new THREE.Mesh(geometry1, material1);
		mesh.position.x = position1.x;
		mesh.position.y = position1.y;
		mesh.position.z = position1.z;
		mesh.updateMatrix();
		mesh.matrixAutoUpdate = false;
		scene.add(mesh);
	}

	function onWindowResize() {
		camera.aspect = window.innerWidth / window.innerHeight;
		camera.updateProjectionMatrix();

		// header of sonar is 70 px - footer 50 px - sidebar 200px
		renderer.setSize(window.innerWidth - 200, window.innerHeight - 120);

		render();
	}

	function animate() {

		requestAnimationFrame(animate);
		controls.update();

	}

	function render() {

		renderer.render(scene, camera);
		stats.update();

	}

    var geometry = new THREE.CubeGeometry(10, 10, 10);

    var redMaterial = new THREE.MeshBasicMaterial({
        color : 0xff0000
    });

    var material = new THREE.MeshBasicMaterial({
        color : 0x0000ff
    });

    <%
   softviz3d = Api::Utils.java_facade.
           getComponentByClassname('softviz3dplugin', 'de.rinderle.softviz3d.SoftViz3dExtension')

   resultMap = softviz3d.createLayoutBySnapshotId(@snapshot.id, 1, 1)
   resultMap.each do |key, value|
        layerPoint = value.getAttributeValue('pos3d')
        layerPointArray = layerPoint.to_s.split(',')
        layerBB = value.getAttributeValue('bb')

%>

        position = new Array();
        position.x = <%= layerPointArray[0] %>;
        position.y = <%= layerPointArray[1] %>;
        position.z = <%= layerPointArray[2] %>;

        geometryLayer = new THREE.CubeGeometry(<%= layerBB.getWidth() %>, 1, <%= layerBB.getHeight() %>);

        // <%= value.to_s %>
        createBox(geometryLayer, material, position);

    <%

       value.nodeElementsAsArray.each { |val|

             point = val.getAttributeValue('pos3d')
             pointArray = point.to_s.split(',')
            %>

                position = new Array();
                position.x = <%= pointArray[0] %>;
                position.y = <%= pointArray[1] %>;
                position.z = <%= pointArray[2] %>;

                // <%= val.to_s %>
                 createBox(geometry, redMaterial, position);

            <%

             puts val.getName().to_s
       }
   end
%>

</script>
