<script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softviz3d/threeJS/three.min.js"></script>

<script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softviz3d/threeJS/OrbitControls.js"></script>

<script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softviz3d/threeJS/Detector.js"></script>
<script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softviz3d/threeJS/stats.min.js"></script>

<script type="text/javascript" src="<%= "#{ApplicationController.root_context}" -%>/static/softviz3d/js/ThreeScene.js"></script>

<div id="metricForm" style="height: 30px;">
  <%
     # get extension class and start layout
     softviz3d = Api::Utils.java_facade.
             getComponentByClassname('softviz3d', 'de.rinderle.softviz3d.SoftViz3dExtension')

     metricIds = softviz3d.getMetricsForSnapshot(@snapshot.id)
    
    # get all defined metric for project files
     metrics=[]
     metricIds.each do |index|
       m = metric(index)
       metrics << m if m
     end

    # set default metric ids if no metrics selected
    if (params[:metric1].blank?) 
       puts("no param 1 - default params")
       params[:metric1] = softviz3d.getMetric1FromSettings().to_s
    end
    if (params[:metric2].blank?) 
       puts("no param 2 - default params")
       params[:metric2] = softviz3d.getMetric2FromSettings().to_s
    end
  %>
  <% form_tag({:action => @resource.id.to_s}, {:id => 'softviz3dForm', :method => 'get'}) do %>
      <input type="hidden" name="page" value="Softviz3d">
      
      Building footprint metric:
      <select name="metric1">
        <%
           # show all graph (as layers)
           metrics.each do |metric|
             if (metric.id.to_s==params[:metric1].to_s)
        %>
                <option value="<%= metric.id %>" selected><%= metric.short_name %></option>
            <% else %>
                <option value="<%= metric.id %>"><%= metric.short_name %></option>
            <% end %>
        <%
           end
        %>
      </select>

      Building height metric:

      <select name="metric2">
        <%
           # show all graph (as layers)
           metrics.each do |metric|
             if (metric.id.to_s==params[:metric2].to_s)
        %>
                <option value="<%= metric.id %>" selected><%= metric.short_name %></option>
            <% else %>
                <option value="<%= metric.id %>"><%= metric.short_name %></option>
            <% end %>
        <%
           end
        %>
      </select>

      <input type="submit" value="Submit">
  <% end %>
</div>

<div id="renderContainer" style="border: 1px solid black;"></div>

<script type="text/javascript">
    if (!Detector.webgl) {
        Detector.addGetWebGLMessage();
    }

    init(document.getElementById('renderContainer'), true);
    createCenterCube();
    animate();
</script>

<script type="text/javascript">
    initializeWebservice(<%= @snapshot.id %>, <%= params[:metric1] %>, <%= params[:metric2] %>);

   <%
   # get extension class and start layout
   softviz3d = Api::Utils.java_facade.
           getComponentByClassname('softviz3d', 'de.rinderle.softviz3d.SoftViz3dExtension')

   resultMap = softviz3d.createLayoutBySnapshotId(@snapshot.id, params[:metric1], params[:metric2])
           
   # show all graph (as layers)
   resultMap.each do |key, value|
        # set bb (position and size)
        layerBB = value.getAttributeValue('bb')
       %>
        position = new Array();
        position.x = <%= layerBB.getX() %>;
        position.y = <%= value.getAttributeValue('layerHeight3d') %>;
        position.z = <%= layerBB.getY() %>;

        <% heightString = value.getAttributeValue('buildingHeight').to_s %>

        geometryLayer = new THREE.BoxGeometry(<%= layerBB.getWidth() %>, 5,
                <%= layerBB.getHeight() %>);

        // set material (color)
        layerMaterial = new THREE.MeshBasicMaterial({
            color: <%= value.getAttributeValue('color').getHex %>
        });

        // <%= value.to_s %>
        createBox(geometryLayer, layerMaterial, position, "<%= key %>");

        // set treeNode material for all containing treeNodes
        <%
        # show all treeNodes
        value.nodeElementsAsArray.each { |val|
            %>
            var nodeMaterial = new THREE.MeshLambertMaterial({
                color: <%= value.getAttributeValue('nodesColor') %>
            });
            <%
            point = val.getAttributeValue('pos')
            pointArray = point.to_s.split(',')
            heightString = val.getAttributeValue('buildingHeight')
           %>
            var nodeGeometry = new THREE.BoxGeometry(
                    <%= val.getAttributeValue('width').to_s %>, <%= heightString %>,
                    <%= val.getAttributeValue('width').to_s %>);

            var position = new Array();
            position.x = <%= pointArray[0] %>;
            <% zPos = val.getAttributeValue('layerHeight3d').to_f + heightString.to_f / 2 %>
            position.y = <%= zPos.to_s %>;
            position.z = <%= pointArray[1] %>;

            //var textsize = <%= val.getAttributeValue('width').to_f / 8 %>

            //textposition = new Array();
            //textposition.x = position.x;
            //textposition.y = <%= val.getAttributeValue('layerHeight3d').to_f + heightString.to_f + 10 %> +textsize / 2;
            //textposition.z = position.z;

            //threeScene.drawText("<%= val.getAttributeValue('displayName').to_s %>", textposition, textsize)

            // <%= val.to_s %>
            createBox(nodeGeometry, nodeMaterial, position, "<%= val.getAttributeValue('id') %>");
            <%
        }
   end
%>

   setLight();

</script>

<div id="detailsContainer"
     style="border: 1px solid blue; position: absolute;
             top: 40px; right: 10px; width: 200px; height: 200px;">
</div>