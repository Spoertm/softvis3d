# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "ubuntu/trusty64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  config.vm.network "forwarded_port", guest: 80, host: 9080
  config.vm.network "forwarded_port", guest: 9000, host: 9000
  config.vm.network "forwarded_port", guest: 3306, host: 3306

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  #config.vm.network "private_network", ip: "192.168.56.92"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  if Vagrant.has_plugin?("vagrant-proxyconf")
    config.proxy.http     = ""
    config.proxy.https    = ""
    config.proxy.no_proxy = "localhost,127.0.0.1,.example.com"
  end

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  #   # Don't boot with headless mode
      vb.gui = true
  #
  #   # Use VBoxManage to customize the VM. For example to change memory:
  #   vb.customize ["modifyvm", :id, "--memory", "1024"]
  end
  #
  # View the documentation for the provider you're using for more
  # information on available options.

  # Enable provisioning with CFEngine. CFEngine Community packages are
  # automatically installed. For example, configure the host as a
  # policy server and optionally a policy file to run:
  #
  # config.vm.provision "cfengine" do |cf|
  #   cf.am_policy_hub = true
  #   # cf.run_file = "motd.cf"
  # end
  #
  # You can also configure and bootstrap a client to an existing
  # policy server:
  #
  # config.vm.provision "cfengine" do |cf|
  #   cf.policy_server_address = "10.0.2.15"
  # end

  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file default.pp in the manifests_path directory.
  #
  # config.vm.provision "puppet" do |puppet|
  #   puppet.manifests_path = "manifests"
  #   puppet.manifest_file  = "site.pp"
  # end

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  #
  # config.vm.provision "chef_solo" do |chef|
  #   chef.cookbooks_path = "../my-recipes/cookbooks"
  #   chef.roles_path = "../my-recipes/roles"
  #   chef.data_bags_path = "../my-recipes/data_bags"
  #   chef.add_recipe "mysql"
  #   chef.add_role "web"
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { mysql_password: "foo" }
  # end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision "chef_client" do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # If you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = "ORGNAME-validator"

  #config.vm.provision :shell, path: "bootstrap.sh"

	graphvizVersion = {
     'graphviz' => "192.168.56.241",
      'sonar51' => "192.168.56.242",
      'sonarTrunk' => "192.168.56.243",
      'sonar454' => "192.168.56.244",
      'sonar501' => "192.168.56.245"
  }

  config.vm.define "seusri" do |seusri|
    
    seusri.vm.hostname = "seusri"    

    # prepare this box with an Ansible installation
    # seusri.vm.provision "shell", path: "seusri/epel.sh"
    #seusri.vm.provision "shell", path: "seusri/ansible-pip.sh"
	  seusri.vm.provision "shell", path: "seusri/ansible.sh"
	
		# provide keypair for users vagrant and root
		seusri.vm.provision "shell", path: "seusri/vagrant_keys.sh"

    # always use 192.168.56.xxx - preconfigured in VirtualBox network adapters
	# creating own network adapters wont work (no Admin rights -> E_FAIL (0x80004005)
    seusri.vm.network :private_network, ip: "192.168.56.240"
	
		if ENV["SEU_SYNCEDFOLDER"].nil?
		  puts "'SEU_SYNCEDFOLDER' not set - using ../Ansible"
		  ENV["SEU_SYNCEDFOLDER"] = "../ansible"
		end

		if ENV["SEU_SYNCEDFOLDER_NAME"].nil?
		  puts "'SEU_SYNCEDFOLDER_NAME' not set - using '/ansible'"
		  ENV["SEU_SYNCEDFOLDER_NAME"] = "/ansible"
		end
	
	seusri.vm.synced_folder ENV["SEU_SYNCEDFOLDER"], ENV["SEU_SYNCEDFOLDER_NAME"], id: "ansible",
		owner: "vagrant",
		group: "vagrant",
		mount_options: ["dmode=775,fmode=664"]
	
	#seusri.vm.synced_folder ENV["TMPDIR_ANSIBLE"], "/tmp/ansible", id: "tmp_ansible",
	#	owner: "vagrant",
	#	group: "vagrant",
	#	mount_options: ["dmode=775,fmode=664"]
	
    # Provider-specific configuration so you can fine-tune various
    # backing providers for Vagrant. These expose provider-specific options.
    # Example for VirtualBox:
    #
    seusri.vm.provider :virtualbox do |vb|
      # Don't boot with headless mode
      vb.gui = true
      # vb.gui = false
    
    #   # Use VBoxManage to customize the VM. For example to change memory:
      vb.customize ["modifyvm", :id, "--memory", "1024"]
      # "Software Entwicklungs Umgebung"
      vb.name = "seusri"
    end    
  end

# loop over all IPs defined above
 all = [graphvizVersion]
 all.each do |ips|
   ips.each do |k, v|
   
	  puts ( "#{k}: #{v}" )

    config.vm.synced_folder "../target", "/target"

	  config.vm.define "#{k}" do |box|
		
		box.vm.hostname = "#{k}"   
		
		# ensure .ssh/authorized_keys for users vagrant and root
		box.vm.provision "shell", path: "keys/authorized_keys.sh"	

    box.vm.network "forwarded_port", guest: 80, host: 9080
    box.vm.network "forwarded_port", guest: 9000, host: 9000
    box.vm.network "forwarded_port", guest: 3306, host: 3306
    box.vm.network "forwarded_port", guest: 8000, host: 8000
  
		# always use 192.168.56.xxx - preconfigured in VirtualBox network adapters
		# creating own network adapters wont work (no Admin rights -> E_FAIL (0x80004005)
		box.vm.network :private_network, ip: "#{v}"

        #box.vm.synced_folder ENV["TMPDIR_ANSIBLE"], "/tmp/ansible", id: "tmp_ansible",
        #    owner: "vagrant",
        #    group: "vagrant",
        #    mount_options: ["dmode=775,fmode=664"]
        
		box.vm.provider :virtualbox do |vb|
		  # Don't boot with headless mode
		  vb.gui = true
		
		  #   # Use VBoxManage to customize the VM. For example to change memory:
		  memory = "2048"
		  #if memory_2048.include? ("#{k}")
		  #  memory = 2048
		  #end
		  vb.customize ["modifyvm", :id, "--memory", memory]
		  vb.name = "#{k}"
		end    
	  end
	end
  end
  
end
