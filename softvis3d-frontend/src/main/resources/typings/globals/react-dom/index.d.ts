///
/// softvis3d-frontend
/// Copyright (C) 2016 Stefan Rinderle and Yvo Niedrich
/// stefan@rinderle.info / yvo.niedrich@gmail.com
///
/// This program is free software; you can redistribute it and/or
/// modify it under the terms of the GNU Lesser General Public
/// License as published by the Free Software Foundation; either
/// version 3 of the License, or (at your option) any later version.
///
/// This program is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
/// Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public
/// License along with this program; if not, write to the Free Software
/// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
///

// Generated by typings
// Source: https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/b9642fb8ac07f7164dc643ddd1fa99b58ae9be8b/react/react-dom.d.ts
declare namespace __React {
    namespace __DOM {
        function findDOMNode<E extends Element>(instance: ReactInstance): E;
        function findDOMNode(instance: ReactInstance): Element;

        function render<P extends DOMAttributes, T extends Element>(
            element: DOMElement<P, T>,
            container: Element,
            callback?: (element: T) => any): T;
        function render<P>(
            element: SFCElement<P>,
            container: Element,
            callback?: () => any): void;
        function render<P, T extends Component<P, ComponentState>>(
            element: CElement<P, T>,
            container: Element,
            callback?: (component: T) => any): T;
        function render<P>(
            element: ReactElement<P>,
            container: Element,
            callback?: (component?: Component<P, ComponentState> | Element) => any): Component<P, ComponentState> | Element | void;

        function unmountComponentAtNode(container: Element): boolean;

        var version: string;

        function unstable_batchedUpdates<A, B>(callback: (a: A, b: B) => any, a: A, b: B): void;
        function unstable_batchedUpdates<A>(callback: (a: A) => any, a: A): void;
        function unstable_batchedUpdates(callback: () => any): void;

        function unstable_renderSubtreeIntoContainer<P extends DOMAttributes, T extends Element>(
            parentComponent: Component<any, any>,
            element: DOMElement<P, T>,
            container: Element,
            callback?: (element: T) => any): T;
        function unstable_renderSubtreeIntoContainer<P, T extends Component<P, ComponentState>>(
            parentComponent: Component<any, any>,
            element: CElement<P, T>,
            container: Element,
            callback?: (component: T) => any): T;
        function render<P>(
            parentComponent: Component<any, any>,
            element: SFCElement<P>,
            container: Element,
            callback?: () => any): void;
        function unstable_renderSubtreeIntoContainer<P>(
            parentComponent: Component<any, any>,
            element: ReactElement<P>,
            container: Element,
            callback?: (component?: Component<P, ComponentState> | Element) => any): Component<P, ComponentState> | Element | void;
    }

    namespace __DOMServer {
        function renderToString(element: ReactElement<any>): string;
        function renderToStaticMarkup(element: ReactElement<any>): string;
        var version: string;
    }
}

declare module "react-dom" {
    import DOM = __React.__DOM;
    export = DOM;
}

declare module "react-dom/server" {
    import DOMServer = __React.__DOMServer;
    export = DOMServer;
}
